// Using ARM templates to deploy VMs:
// JSON file (configuration file) to define resources.
// building block for automation
// Templates are submitted to ARM for provisioning
// Export ARM template from azure portal or write your own.
// Deploy from quickstart template library.
// ARM takes json as input converts it into REST API Operations.
// How to deploy custom ARM templates?
// Search for deploy -> Deploy a custom template -> select a template -> load file.
// Deploy ARM template via Powershell:
// New-AzResourceGroupDeployment -Name mydeployment -ResourceGroupName 'rgroup' -TemplateFile './template/template.json' -TemplateParameterFile './template/parameter.json'
// ARM Template format:
  {
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json",
  "contentVersion": "", //for user's self versioning of templates
  "apiProfile": "", //versioning of resource types defined in the template
  "parameters": {}, //values required during deployment so that same template can be used for multiple redeployments. eg. resource groups, regions, resource names, network configurations.
  "variables": {}, //values that are reused in templates and constructed from parameter values.
  "functions": [], //user-defined functions - create customized functions to simplify templates and help enable reuse of templates. eg. generating resource name based on env(dev, uat, prod etc.)
  "resources": [], //things to be deployed like vm, storage account, networking element etc.
  "outputs": {}, //return values from resources being deployed
  }
// Example of ARM template:
  {
  "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": { // declaration of parameters(5 -> )
  "location": {
  "type": "string"
  },
  "networkInterfaceName": {
  "type": "string"
  },
  "networkSecurityGroupName": {
  "type": "string"
  },
  "networkSecurityGroupRules": {
  "type": "array"
  },
  "subnetName": {
  "type": "string"
  },
  "virtualNetworkName": {
  "type": "string"
  },
  "addressPrefixes": {
  "type": "array"
  },
  "subnets": {
  "type": "array"
  },
  "publicIpAddressName": {
  "type": "string"
  },
  "publicIpAddressType": {
  "type": "string"
  },
  "publicIpAddressSku": {
  "type": "string"
  },
  "pipDeleteOption": {
  "type": "string"
  },
  "virtualMachineName": {
  "type": "string"
  },
  "virtualMachineComputerName": {
  "type": "string"
  },
  "virtualMachineRG": {
  "type": "string"
  },
  "osDiskType": {
  "type": "string"
  },
  "osDiskDeleteOption": {
  "type": "string"
  },
  "virtualMachineSize": {
  "type": "string"
  },
  "nicDeleteOption": {
  "type": "string"
  },
  "adminUsername": {
  "type": "string"
  },
  "securityType": {
  "type": "string"
  },
  "secureBoot": {
  "type": "bool"
  },
  "vTPM": {
  "type": "bool"
  }
  },
  "variables": {
  "nsgId": "[resourceId(resourceGroup().name, 'Microsoft.Network/networkSecurityGroups', parameters('networkSecurityGroupName'))]",
  "vnetName": "[parameters('virtualNetworkName')]",
  "vnetId": "[resourceId(resourceGroup().name,'Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]",
  "subnetRef": "[concat(variables('vnetId'), '/subnets/', parameters('subnetName'))]"
  },
  "resources": [
  {
  "name": "[parameters('networkInterfaceName')]",
  "type": "Microsoft.Network/networkInterfaces",
  "apiVersion": "2021-08-01",
  "location": "[parameters('location')]",
  "dependsOn": [
  "[concat('Microsoft.Network/networkSecurityGroups/', parameters('networkSecurityGroupName'))]",
  "[concat('Microsoft.Network/virtualNetworks/', parameters('virtualNetworkName'))]",
  "[concat('Microsoft.Network/publicIpAddresses/', parameters('publicIpAddressName'))]"
  ],
  "properties": {
  "ipConfigurations": [
  {
  "name": "ipconfig1",
  "properties": {
  "subnet": {
  "id": "[variables('subnetRef')]"
  },
  "privateIPAllocationMethod": "Dynamic",
  "publicIpAddress": {
  "id": "[resourceId(resourceGroup().name, 'Microsoft.Network/publicIpAddresses', parameters('publicIpAddressName'))]",
  "properties": {
  "deleteOption": "[parameters('pipDeleteOption')]"
  }
  }
  }
  }
  ],
  "networkSecurityGroup": {
  "id": "[variables('nsgId')]"
  }
  }
  },
  {
  "name": "[parameters('networkSecurityGroupName')]",
  "type": "Microsoft.Network/networkSecurityGroups",
  "apiVersion": "2019-02-01",
  "location": "[parameters('location')]",
  "properties": {
  "securityRules": "[parameters('networkSecurityGroupRules')]"
  }
  },
  {
  "name": "[parameters('virtualNetworkName')]",
  "type": "Microsoft.Network/virtualNetworks",
  "apiVersion": "2021-01-01",
  "location": "[parameters('location')]",
  "properties": {
  "addressSpace": {
  "addressPrefixes": "[parameters('addressPrefixes')]"
  },
  "subnets": "[parameters('subnets')]"
  }
  },
  {
  "name": "[parameters('publicIpAddressName')]",
  "type": "Microsoft.Network/publicIpAddresses",
  "apiVersion": "2020-08-01",
  "location": "[parameters('location')]",
  "properties": {
  "publicIpAllocationMethod": "[parameters('publicIpAddressType')]"
  },
  "sku": {
  "name": "[parameters('publicIpAddressSku')]"
  }
  },
  {
  "name": "[parameters('virtualMachineName')]",
  "type": "Microsoft.Compute/virtualMachines",
  "apiVersion": "2022-03-01",
  "location": "[parameters('location')]",
  "dependsOn": [
  "[concat('Microsoft.Network/networkInterfaces/', parameters('networkInterfaceName'))]"
  ],
  "properties": {
  "hardwareProfile": {
  "vmSize": "[parameters('virtualMachineSize')]"
  },
  "storageProfile": {
  "osDisk": {
  "createOption": "fromImage",
  "managedDisk": {
  "storageAccountType": "[parameters('osDiskType')]"
  },
  "diskSizeGB": 30,
  "deleteOption": "[parameters('osDiskDeleteOption')]"
  },
  "imageReference": {
  "publisher": "canonical",
  "offer": "0001-com-ubuntu-server-focal",
  "sku": "20_04-lts-gen2",
  "version": "latest"
  }
  },
  "networkProfile": {
  "networkInterfaces": [
  {
  "id": "[resourceId('Microsoft.Network/networkInterfaces', parameters('networkInterfaceName'))]",
  "properties": {
  "deleteOption": "[parameters('nicDeleteOption')]"
  }
  }
  ]
  },
  "osProfile": {
  "computerName": "[parameters('virtualMachineComputerName')]",
  "adminUsername": "[parameters('adminUsername')]",
  "linuxConfiguration": {
  "disablePasswordAuthentication": true
  }
  },
  "securityProfile": {
  "securityType": "[parameters('securityType')]",
  "uefiSettings": {
  "secureBootEnabled": "[parameters('secureBoot')]",
  "vTpmEnabled": "[parameters('vTPM')]"
  }
  },
  "diagnosticsProfile": {
  "bootDiagnostics": {
  "enabled": true
  }
  }
  }
  }
  ],
  "outputs": {
  "adminUsername": {
  "type": "string",
  "value": "[parameters('adminUsername')]"
  }
  }
  }
